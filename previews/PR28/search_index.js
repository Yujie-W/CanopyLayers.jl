var documenterSearchIndex = {"docs":
[{"location":"generated/fluspect/","page":"Fluspect","title":"Fluspect","text":"EditURL = \"https://github.com/Yujie-W/CanopyLayers.jl/blob/master/docs/src/examples/fluspect.jl\"","category":"page"},{"location":"generated/fluspect/#Fluspect","page":"Fluspect","title":"Fluspect","text":"","category":"section"},{"location":"generated/fluspect/","page":"Fluspect","title":"Fluspect","text":"# load packages\nusing CanopyLayers\nusing PlotPlants\nFT = Float32;\nnothing #hide","category":"page"},{"location":"generated/fluspect/#Excitation-wavelength","page":"Fluspect","title":"Excitation wavelength","text":"","category":"section"},{"location":"generated/fluspect/","page":"Fluspect","title":"Fluspect","text":"wls    = create_wave_length(FT);\ncan    = create_canopy_rt(FT);\nrt_dim = create_rt_dims(can, wls);\nleaf   = create_leaf_bios(FT, rt_dim);\nfluspect!(leaf, wls);\n\n_fig,_axes = create_canvas(\"Fluspect example\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(wls.WL, leaf.ρ_SW, \"k-\", label=\"Reflectance\");\n_ax1.plot(wls.WL, leaf.τ_SW, \"k:\", label=\"Transmittance\");\n_ax2.contourf(wls.WLE, wls.WLF, leaf.Mb);\n_ax3.contourf(wls.WLE, wls.WLF, leaf.Mf);\n_ax1.legend(loc=\"upper right\");\n_ax1.set_ylim(0,0.65);\nset_xlabels!(_axes, [\"Wavelength (nm)\", \"Excitation wavelength (nm)\",\n                     \"Excitation wavelength (nm)\"], fontsize=12);\nset_ylabels!(_axes, [\"Reflectance or Transmittance\", \"SIF wavelength (nm)\",\n                     \"SIF wavelength (nm)\"], fontsize=12);\nset_titles!(_axes; labels=[\"Spectrum\", \"Backward matrix\", \"Forward matrix\"],\n                   usetex=false);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/fluspect/#Change-leaf-properties","page":"Fluspect","title":"Change leaf properties","text":"","category":"section"},{"location":"generated/fluspect/","page":"Fluspect","title":"Fluspect","text":"# here we change all the properties at the same time as an example\nleaf.N   = 2.0;\nleaf.Cab = 50.0;\nleaf.Car = 15.0;\nleaf.Ant = 0.1;\nleaf.Cs  = 0.1;\nleaf.Cw  = 0.02;\nleaf.Cm  = 0.02;\nleaf.Cx  = 0.1;\nleaf.fqe = 0.8;\nfluspect!(leaf, wls);\n\n_fig,_axes = create_canvas(\"Change leaf properties\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(wls.WL, leaf.ρ_SW, \"k-\", label=\"Reflectance\");\n_ax1.plot(wls.WL, leaf.τ_SW, \"k:\", label=\"Transmittance\");\n_ax2.contourf(wls.WLE, wls.WLF, leaf.Mb);\n_ax3.contourf(wls.WLE, wls.WLF, leaf.Mf);\n_ax1.legend(loc=\"upper right\");\n_ax1.set_ylim(0,0.65);\nset_xlabels!(_axes, [\"Wavelength (nm)\", \"Excitation wavelength (nm)\",\n                     \"Excitation wavelength (nm)\"], fontsize=12);\nset_ylabels!(_axes, [\"Reflectance or Transmittance\", \"SIF wavelength (nm)\",\n                     \"SIF wavelength (nm)\"], fontsize=12);\nset_titles!(_axes; labels=[\"Spectrum\", \"Backward matrix\", \"Forward matrix\"],\n                   usetex=false);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/fluspect/","page":"Fluspect","title":"Fluspect","text":"","category":"page"},{"location":"generated/fluspect/","page":"Fluspect","title":"Fluspect","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/bigleaf/","page":"Bigleaf","title":"Bigleaf","text":"EditURL = \"https://github.com/Yujie-W/CanopyLayers.jl/blob/master/docs/src/examples/bigleaf.jl\"","category":"page"},{"location":"generated/bigleaf/#Big-Leaf-Model","page":"Bigleaf","title":"Big Leaf Model","text":"","category":"section"},{"location":"generated/bigleaf/","page":"Bigleaf","title":"Bigleaf","text":"# load packages\nusing CanopyLayers\nusing PlotPlants\nFT = Float32;\nnothing #hide","category":"page"},{"location":"generated/bigleaf/#Sunlit-and-shaded-layers","page":"Bigleaf","title":"Sunlit and shaded layers","text":"","category":"section"},{"location":"generated/bigleaf/#vs.-leaf-area-index","page":"Bigleaf","title":"vs. leaf area index","text":"","category":"section"},{"location":"generated/bigleaf/","page":"Bigleaf","title":"Bigleaf","text":"lais   = collect(FT, 0.1:0.1:5.0);\nlai_sl = similar(lais);\npar_sl = similar(lais); par_sh = similar(lais);\nrad_sl = similar(lais); rad_sh = similar(lais);\nfor i in eachindex(lais)\n    lai_sl[i], par_sl[i], par_sh[i], rad_sl[i], rad_sh[i] =\n        big_leaf_partition(lais[i], FT(30), FT(800));\nend\n\n_fig,_axes = create_canvas(\"vs LAI\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(lais, lai_sl, \"k-\");\n_ax2.plot(lais, par_sl, \"k-\", label=\"Sunlit\");\n_ax2.plot(lais, par_sh, \"k:\", label=\"Shaded\");\n_ax3.plot(lais, rad_sl, \"k-\", label=\"Sunlit\");\n_ax3.plot(lais, rad_sh, \"k:\", label=\"Shaded\");\n_ax2.legend(loc=\"upper right\");\n_ax3.legend(loc=\"upper right\");\nset_xlabels!(_axes, [\"Leaf area index\" for i in 1:3]);\nset_ylabels!(_axes, [\"Sunlit fraction\", \"PAR (μmol m⁻² s⁻¹)\", \"Rabs (W m⁻²)\"]);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/bigleaf/#vs.-zenith-angle","page":"Bigleaf","title":"vs. zenith angle","text":"","category":"section"},{"location":"generated/bigleaf/","page":"Bigleaf","title":"Bigleaf","text":"angles = collect(FT, 5:5:75);\nlai_sl = similar(angles);\npar_sl = similar(angles); par_sh = similar(angles);\nrad_sl = similar(angles); rad_sh = similar(angles);\nfor i in eachindex(angles)\n    lai_sl[i], par_sl[i], par_sh[i], rad_sl[i], rad_sh[i] =\n        big_leaf_partition(FT(3), angles[i], FT(800));\nend\n\n_fig,_axes = create_canvas(\"vs Zenith angle\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(angles, lai_sl, \"k-\");\n_ax2.plot(angles, par_sl, \"k-\", label=\"Sunlit\");\n_ax2.plot(angles, par_sh, \"k:\", label=\"Shaded\");\n_ax3.plot(angles, rad_sl, \"k-\", label=\"Sunlit\");\n_ax3.plot(angles, rad_sh, \"k:\", label=\"Shaded\");\n_ax2.legend(loc=\"upper left\");\n_ax3.legend(loc=\"upper left\");\nset_xlabels!(_axes, [\"Zenith angle (°)\" for i in 1:3]);\nset_ylabels!(_axes, [\"Sunlit fraction\", \"PAR (μmol m⁻² s⁻¹)\", \"Rabs (W m⁻²)\"]);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/bigleaf/#vs.-total-radiation","page":"Bigleaf","title":"vs. total radiation","text":"","category":"section"},{"location":"generated/bigleaf/","page":"Bigleaf","title":"Bigleaf","text":"rads   = collect(FT, 50:50:1000);\nlai_sl = similar(rads);\npar_sl = similar(rads); par_sh = similar(rads);\nrad_sl = similar(rads); rad_sh = similar(rads);\nfor i in eachindex(rads)\n    lai_sl[i], par_sl[i], par_sh[i], rad_sl[i], rad_sh[i] =\n        big_leaf_partition(FT(3), FT(30), rads[i]);\nend\n\n_fig,_axes = create_canvas(\"vs Total radiation\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(rads, lai_sl, \"k-\");\n_ax2.plot(rads, par_sl, \"k-\", label=\"Sunlit\");\n_ax2.plot(rads, par_sh, \"k:\", label=\"Shaded\");\n_ax3.plot(rads, rad_sl, \"k-\", label=\"Sunlit\");\n_ax3.plot(rads, rad_sh, \"k:\", label=\"Shaded\");\n_ax2.legend(loc=\"upper left\");\n_ax3.legend(loc=\"upper left\");\nset_xlabels!(_axes, [\"Total radiation (W m⁻²)\" for i in 1:3]);\nset_ylabels!(_axes, [\"Sunlit fraction\", \"PAR (μmol m⁻² s⁻¹)\", \"Rabs (W m⁻²)\"]);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/bigleaf/#vs.-direct-light-fraction","page":"Bigleaf","title":"vs. direct light fraction","text":"","category":"section"},{"location":"generated/bigleaf/","page":"Bigleaf","title":"Bigleaf","text":"dirs   = collect(FT, 0.2:0.05:0.8);\nlai_sl = similar(dirs);\npar_sl = similar(dirs); par_sh = similar(dirs);\nrad_sl = similar(dirs); rad_sh = similar(dirs);\nfor i in eachindex(dirs)\n    lai_sl[i], par_sl[i], par_sh[i], rad_sl[i], rad_sh[i] =\n        big_leaf_partition(FT(3), FT(30), FT(800), dirs[i]);\nend\n\n_fig,_axes = create_canvas(\"vs Direct light fraction\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(dirs, lai_sl, \"k-\");\n_ax2.plot(dirs, par_sl, \"k-\", label=\"Sunlit\");\n_ax2.plot(dirs, par_sh, \"k:\", label=\"Shaded\");\n_ax3.plot(dirs, rad_sl, \"k-\", label=\"Sunlit\");\n_ax3.plot(dirs, rad_sh, \"k:\", label=\"Shaded\");\n_ax2.legend(loc=\"upper left\");\n_ax3.legend(loc=\"upper left\");\nset_xlabels!(_axes, [\"Direct light fraction\" for i in 1:3]);\nset_ylabels!(_axes, [\"Sunlit fraction\", \"PAR (μmol m⁻² s⁻¹)\", \"Rabs (W m⁻²)\"]);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/bigleaf/","page":"Bigleaf","title":"Bigleaf","text":"","category":"page"},{"location":"generated/bigleaf/","page":"Bigleaf","title":"Bigleaf","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/scope/","page":"Scope","title":"Scope","text":"EditURL = \"https://github.com/Yujie-W/CanopyLayers.jl/blob/master/docs/src/examples/scope.jl\"","category":"page"},{"location":"generated/scope/#Big-Leaf-Model","page":"Scope","title":"Big Leaf Model","text":"","category":"section"},{"location":"generated/scope/","page":"Scope","title":"Scope","text":"# load packages\nusing CanopyLayers\nusing PlotPlants\nFT = Float32;\nnothing #hide","category":"page"},{"location":"generated/scope/#Initialization","page":"Scope","title":"Initialization","text":"","category":"section"},{"location":"generated/scope/","page":"Scope","title":"Scope","text":"Besides the individual functions to initialize parameters for CanopyLayers,     a general function is provided to initialize all the parameters directly.","category":"page"},{"location":"generated/scope/","page":"Scope","title":"Scope","text":"angles, can, can_opt, can_rad, in_rad, leaves, rt_con, rt_dim, soil, wls =\n    initialize_rt_module(FT; nLayer=20, LAI=3);\nnothing #hide","category":"page"},{"location":"generated/scope/#Steps","page":"Scope","title":"Steps","text":"","category":"section"},{"location":"generated/scope/","page":"Scope","title":"Scope","text":"# 1. Update canopy optical properties (required)\ncanopy_geometry!(can, angles, can_opt, rt_con);\n# 2. Update scattering coefficients (required)\ncanopy_matrices!(leaves, can_opt);\n# 3. Simulate short wave simulation (required)\nshort_wave!(can, can_opt, can_rad, in_rad, soil, rt_con);\n# 4. Update integrated radiation fluxes (required for photosynthesis)\ncanopy_fluxes!(can, can_opt, can_rad, in_rad, soil, leaves, wls, rt_con);\n# 5. Update SIF related spectrum (required for SIF)\nSIF_fluxes!(leaves, can_opt, can_rad, can, soil, wls, rt_con, rt_dim);\n# 6. Update thermo fluxes (required for leaf energy budget)\nthermal_fluxes!(leaves, can_opt, can_rad, can, soil, [FT(400.0)], wls);\n\n_fig,_axes = create_canvas(\"SIF example\"; ncol=2);\n_ax1,_ax2 = _axes;\n_ax1.plot(wls.WL , can_rad.alb_obs, \"k-\");\n_ax2.plot(wls.WLF, can_rad.SIF_obs, \"k-\");\nset_xlabels!(_axes, [\"Wave length (nm)\" for i in 1:2], fontsize=12);\nset_ylabels!(_axes, [\"Albedo\", \"obs SIF (mW m⁻² nm⁻¹ sr⁻¹)\"], fontsize=12);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/scope/","page":"Scope","title":"Scope","text":"","category":"page"},{"location":"generated/scope/","page":"Scope","title":"Scope","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#CanopyLayers.jl","page":"Home","title":"CanopyLayers.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CanopyLayers module refactored from original CliMA Land model.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using CanopyLayers\n\ninitialize_rt_module(Float32, nLayer=20, LAI=Float32(3.0));","category":"page"},{"location":"API/#CanopyLayers","page":"API","title":"CanopyLayers","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = CanopyLayers","category":"page"},{"location":"API/#Structures","page":"API","title":"Structures","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Canopy4RT\nCanopyOpticals\nCanopyRads\nIncomingRadiation\nLeafBios\nLeafOpticals\nRTDimensions\nSoilOpticals\nSolarAngles\nWaveLengths","category":"page"},{"location":"API/#CanopyLayers.Canopy4RT","page":"API","title":"CanopyLayers.Canopy4RT","text":"mutable struct Canopy4RT\n\nA canopy struct for the radiation transfer module\n\nFields\n\nnLayer\nNumber of canopy layers\nLAI\nLeaf Area Index\nΩ\nClumping factor\nclump_a\nStructure factor a\nclump_b\nStructure factor b\nleaf_width\nLeaf width\nhc\nVegetation height\nLIDFa\nLeaf Inclination\nLIDFb\nVariation in leaf inclination\nhot\nHotSpot parameter (still need to check!)\niLAI\nLAI in the ith layer\nheight\nCanopy height [m]\nz0m\nCanopy roughness [m]\nz0h\nTree roughtnes [m]\nd\nCanopy displacement height [m]\nCd\nm/sqrt(s) turbulent transfer coefficient\nlitab\nList of mean inclination angles [°]\nlitab_bnd\nList of inclination angle boundaries [°]\nlazitab\nList of mean azimuth angles [°]\ncos_ttlo\nCosine of lazitab\ncos_philo\nCosine of lazitab - psi (relative azimuth angle), update with time\ncos_ttli\nCosine of litab\nsin_ttli\nSine of litab\nvol_scatt\nContainer for volome scatter function\nlidf\nInclination angles weight distribution\nxl\nList of level location (level = layer + 1)\ndx\n1/nLayer\nnAzi\nNumber of azimuth angles\nnIncl\nNumber of inclination angles\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.CanopyOpticals","page":"API","title":"CanopyLayers.CanopyOpticals","text":"mutable struct CanopyOpticals{FT}\n\nA struct for canopy optical properties\n\nFields\n\nnAzi\nNumber of azimuth angles\nnIncl\nNumber of inclination agles\nnLayer\nNumber of canopy layers\nnWL\nNumber of wave lengths\nsdb\nSolar -> Diffuse backscatter weight\nsdf\nSolar -> Diffuse forward scatter weight\ndob\nDiffuse -> Directional backscatter weight\ndof\nDiffuse -> Directional forward scatter weight\nddb\nDiffuse -> Diffuse backscatter weight\nddf\nDiffuse -> Diffuse forward scatter weight\nks\nSolar beam extinction coefficient weight\nko\nOutgoing beam extinction coefficient weight\nbf\n?\nsob\nWeight of specular2directional backscatter coefficient\nsof\nWeight of specular2directional forward coefficient\nPs\nProbability of directly viewing a leaf in solar direction\nPo\nProbability of directly viewing a leaf in viewing direction\nPso\nBi-directional probability of directly viewing a leaf (solar->canopy->viewing)\nfs\nconversion factor fs to compute irradiance on inclined leaf\nabsfs\nabs(fs)\nabsfsfo\nabs(fs*fo)\nfsfo\nfs*fo\nfo\nconversion factor fo for angle towards observer (not sun like fs)\nabsfo\nabs(fo)\ncosΘ_l\nCosine of leaf azimuths\ncos2Θ_l\ncos of leaf azimuth sqared\nsigb\ndiffuse     backscatter scattering coefficient for diffuse  incidence\nsigf\ndiffuse     forward     scattering coefficient for diffuse  incidence\nsb\ndiffuse     backscatter scattering coefficient for specular incidence\nsf\ndiffuse     forward     scattering coefficient for specular incidence\nvb\ndirectional backscatter scattering coefficient for diffuse  incidence\nvf\ndirectional forward     scattering coefficient for diffuse  incidence\nw\nbidirectional scattering coefficent (directional-directional)\na\nattenuation\nXsd\nEffective layer transmittance (direct->diffuse)\nXdd\nEffective layer transmittance (diffuse->diffuse)\nR_sd\nEffective layer reflectance (direct->diffuse)\nR_dd\nEffective layer reflectance (diffuse->diffuse)\nEs_\nSolar direct radiation per layer)\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.CanopyRads","page":"API","title":"CanopyLayers.CanopyRads","text":"mutable struct CanopyRads{FT}\n\nA struct for canopy radiation information\n\nFields\n\nnAzi\nNumber of azimuth angles\nnIncl\nNumber of inclination agles\nnLayer\nNumber of canopy layers\nnLevel\nNumber of canopy levels\nnWL\nNumber of wave lengths\nnWLF\nNumber of wave lengths for SIF\nintEout\nIntegrated TOC outgoing flux [W m⁻²]\nincomingPAR\nIncident spectrally integrated total PAR [mol m⁻² s⁻¹]\nincomingPAR_direct\nIncident spectrally integrated direct PAR [mol m⁻² s⁻¹]\nincomingPAR_diffuse\nIncident spectrally integrated diffuse PAR [mol m⁻² s⁻¹]\nRnSoil_diffuse\nNet radiation of shaded soil [W m⁻²]\nRnSoil_direct\nNet Short-wave radiation of sunlit soil [W m⁻²]\nRnSoil\nNet Short-wave radiation of soil (shaded + sunlit) [W m⁻²]\nRnSoilLW\nNet long-wave radiation of soil (shaded + sunlit) [W m⁻²]\nabsPAR_shade\nNet PAR of shaded leaves [mol m⁻² s⁻¹]\nabsPAR_shadeCab\nNet PAR by Cab+Car of shaded leaves [moles m⁻² s⁻¹]\nintNetSW_sunlit\nSpectrally integrated net absorbed direct radiation in each layer [W m⁻²)]\nintNetSW_shade\nSpectrally integrated net absorbed diffuse radiation in each layer [W m⁻²)]\nintNetLW_sunlit\nSpectrally integrated net absorbed direct radiation in each layer [W m⁻²)]\nintNetLW_shade\nSpectrally integrated net absorbed diffuse radiation in each layer [W m⁻²)]\nT_sun\nLeaf temperature (sunlit) [K]\nT_shade\nLeaf temperature (shaded) [K]\nϕ_shade\nFluorescence yield for shaded leaves\nH_shade\nSensible Heat flux H of shaded leaves [W m⁻²]\nLE_shade\nLatent Heat flux LE of shaded leaves [W m⁻²]\nNPQ_shade\nNPQ of shaded leaves\nGPP_shade\nGPP of shaded leaves [μmol m⁻² s⁻¹]\ngs_shade\ngs of shaded leaves [mol m⁻² s⁻¹]\nψl_shade\nLeaf water potential of shaded leaves [MPa]\nCc_shade\nCc of shaded leaves [µmol/mol]\nPi_shade\ninternal CO₂ concentration of shaded leaves [µmol/mol]\nLo\nShort-wave TOC outgoing radiance in observation direction [mW m⁻² nm⁻¹ sr⁻¹]\nEout\nShort-wave TOC outgoing radiation [mW m⁻² nm⁻¹]\nalb_obs\nShort-wave Albedo in viewing direction\nalb_direct\nShort-wave Albedo for direct incoming radiation\nalb_diffuse\nShort-wave Albedo for diffuse incoming radiation\nE_up\nUpwelling diffuse short-wave radiation within canopy [mW m⁻² nm⁻¹]\nE_down\nDownwelling diffuse short-wave radiation within canopy [mW m⁻² nm⁻¹]\nnetSW_sunlit\nNet absorbed direct radiation in each layer [mW m⁻² nm⁻¹]\nnetSW_shade\nnet absorbed diffuse radiation in each layer [mW m⁻² nm⁻¹]\nabsPAR_sun\nnet PAR of sunlit leaves [mol m⁻² s⁻¹]\nabsPAR_sunCab\nnet PAR by Cab+Car of sunlit leaves [mol m⁻² s⁻¹]\nT_sun3D\nLeaf temperature (sunlit) [K]\nϕ_sun\nFluorescence yield for sunlit leaves\nH_sun\nSensible Heat flux H of sunlit leaves [W m⁻²]\nLE_sun\nLatent Heat flux LE of sunlit leaves [W m⁻²]\nNPQ_sun\nNPQ of sunlit leaves\nGPP_sun\nGPP of sunlit leaves [μmol m⁻² s⁻¹]\ngs_sun\ngs of sunlit leaves [mol m⁻² s⁻¹]\nψl_sun\nLeaf water potential of sunlit leaves [MPa]\nCc_sun\nCc of sunlit leaves [µmol/mol]\nPi_sun\nInternal CO₂ concentration of sunlit leaves [µmol/mol]\nSIF_hemi\nHemispheric total outgoing SIF flux [mW m⁻² nm⁻¹])\nSIF_obs\nObserver-direction outgoing SIF radiance  (mW m⁻² nm⁻¹ sr⁻¹))\nSIF_obs_sunlit\nObserver-direction outgoing SIF radiance, sunlit leaves  (mW m⁻² nm⁻¹ sr⁻¹))\nSIF_obs_shaded\nObserver-direction outgoing SIF radiance, shaded leaves  (mW m⁻² nm⁻¹ sr⁻¹))\nSIF_obs_scattered\nObserver-direction outgoing SIF radiance, scattered   (mW m⁻² nm⁻¹ sr⁻¹))\nSIF_obs_soil\nObserver-direction outgoing SIF radiance, soil-reflected  (mW m⁻² nm⁻¹ sr⁻¹))\nSIF_sum\nTotal SIF sum of layer sources  [mW m⁻² nm⁻¹])\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.IncomingRadiation","page":"API","title":"CanopyLayers.IncomingRadiation","text":"mutable struct IncomingRadiation{FT}\n\nIncoming radiation information\n\nFields\n\nE_direct\nDirect incoming radiation [mW m⁻² nm⁻¹]\nE_diffuse\nDiffuse incoming radiation [mW m⁻² nm⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.LeafBios","page":"API","title":"CanopyLayers.LeafBios","text":"mutable struct LeafBios{FT}\n\nA struct of leaf biological parameters\n\nFields\n\nnWL\nNumber of wave length\nnWLE\nNumber of wave length for excitation\nnWLF\nNumber of wave length for SIF\nN\nLeaf structure parameter\nCab\nChlorophyll a+b content [µg cm⁻²]\nCar\nCarotenoid content [µg cm⁻²]\nAnt\nAnthocynanin content [µg cm⁻²]\nCs\nSenescent material fraction\nCw\nEquivalent water thickness [cm]\nCm\nDry matter content (dry leaf mass per unit area) [g cm⁻²]\nCx\nFractionation between Zeaxanthin and Violaxanthin in Car (1=all Zeaxanthin) (-)\nfqe\nLeaf fluorescence efficiency (Fo standard)\nρ_LW\nBroadband thermal reflectance (-)\nτ_LW\nBroadband thermal transmission (-)\nρ_SW\nShortwave leaf reflectance\nτ_SW\nShortwave leaf transmission\nkChlrel\nRelative absorbtion by Chlorophyll+Car\nkChlrel_old\nRelative absorbtion by Chlorophyll\nMb\nFluorescence excitation matrix backwards\nMf\nFluorescence excitation matrix forwards\nndub\nDoubling adding layers\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.LeafOpticals","page":"API","title":"CanopyLayers.LeafOpticals","text":"mutable struct LeafOpticals{FT}\n\nStruct for leaf optical properties\n\nFields\n\nnr\nKm\nKab\nKant\nKcar\nKw\nKBrown\nphi\nKcaV\nKcaZ\nlambda\nWave length [nm], same as WL in WaveLengths`\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.RTDimensions","page":"API","title":"CanopyLayers.RTDimensions","text":"mutable struct RTDimensions\n\nStruct that stores matrix dimension information\n\nFields\n\nnAzi\nNumber of azimuth angles\nnIncl\nNumber of inclination agles\nnLayer\nNumber of canopy layers\nnLevel\nNumber of canopy layer boundaries nLayer+1\nnPAR\nNumber of PAR wave lengths\nnWL\nNumber of wave lengths\nnWLE\nNumber of wave length for excitation\nnWLF\nNumber of wave lengths for SIF\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.SoilOpticals","page":"API","title":"CanopyLayers.SoilOpticals","text":"mutable struct SoilOpticals{FT}\n\nA struct of soil optical parameters\n\nFields\n\nalbedo_SW\nShortwave albedo\nalbedo_SW_SIF\nShortwave albedo for SIF\nemsvty_SW\nShortwave Emissivity\nalbedo_LW\nLongwave albedo\nsoil_skinT\nSoil surface temperature [K]\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.SolarAngles","page":"API","title":"CanopyLayers.SolarAngles","text":"struct SolarAngles{FT}\n\nStruct for observation and solar angles\n\nFields\n\ntts\nSolar Zenith Angle [degree]\ntto\nViewing Zenith Angle in [degree]\npsi\nrelative azimuth in [degree]\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.WaveLengths","page":"API","title":"CanopyLayers.WaveLengths","text":"mutable struct WaveLengths{FT}\n\nStruct for pre-set wave length parameters\n\nFields\n\nminwlPAR\nMinimal WL for PAR [nm]\nmaxwlPAR\nMaximal WL for PAR [nm]\nminwle\nMinimal WL for SIF excitation [nm]\nmaxwle\nMaximal WL for SIF excitation [nm]\nminwlf\nMinimal WL for SIF emission/fluorescence [nm]\nmaxwlf\nMaximal WL for SIF emission/fluorescence [nm]\nsWL\nStandard wave length [nm]\ndWL\nDifferential wavelength\noptis\nLeaf optical parameter set\nWL\nWave length [nm]\niWLE\nIndex of WLE in WL\niWLF\nIndex of WLF in WL\niPAR\nindex of wlPAR in WL\nWLE\nexcitation wave length [nm]\nWLF\nFluorescence wave length [nm]\nWL_iPAR\nWave length for PAR\ndWL_iPAR\nDifferential wave length for PAR\ndWL_iWLE\nDifferential wave length for iWLE\nnPAR\nLength of WL_iPAR\nnWL\nLength of WL\nnWLE\nlength of WLE\nnWLF\nlength of WLF\n\n\n\n\n\n","category":"type"},{"location":"API/#Containers","page":"API","title":"Containers","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CFContainer\ncreate_cf_container\nCGContainer\ncreate_cg_container\nSFContainer\ncreate_sf_container\nSWContainer\ncreate_sw_container\nRTContainer\ncreate_rt_container","category":"page"},{"location":"API/#CanopyLayers.CFContainer","page":"API","title":"CanopyLayers.CFContainer","text":"mutable struct CFContainer{FT}\n\nContainer to speed canopy_fluxes! by pre-allocating arrays\n\nFields\n\nabs_wave\nabsorbed energy from wave lengths\nabsfs_lidf\nabsfs' * lidf [nAzi]\nE_all\nwave length energy [same as dWL]\nE_iPAR\nwave length energy [same as iPAR]\nlPs\nlPs [nLayer]\nkChlrel\nkChlrel [same as iPAR]\nPAR_diff\ndiffusive PAR [same as iPAR]\nPAR_diffCab\ndiffusive PAR for photosynthesis [same as iPAR]\nPAR_dir\ndirect PAR [same as iPAR]\nPAR_dirCab\ndiffusive PAR for photosynthesis [same as iPAR]\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.create_cf_container","page":"API","title":"CanopyLayers.create_cf_container","text":"create_cf_container(FT, rt_dim::RTDimensions)\n\nCreate a CFContainer type struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.CGContainer","page":"API","title":"CanopyLayers.CGContainer","text":"mutable struct CGContainer{FT}\n\nContainer to speed canopy_geometry! by pre-allocating arrays\n\nFields\n\n_Co\ncos_ttli .* cos(tto) dim: nIncl\n_Cs\ncos_ttli .* cos(tts) dim: nIncl\n_So\nsin_ttli .* sin(tto) dim: nIncl\n_Ss\nsin_ttli .* sin(tts) dim: nIncl\n_1s\nmaxtrix filled with 1 dim: (1, nAzi)\n_2d\n2D array to speed up _cds and _cdo dim: (nIncl, nAzi)\n_cdo\nCo * _1s .+ _So * cosphilo' dim: (nIncl, nAzi)\n_cds\nCs * _1s .+ _Ss * costtlo' dim: (nIncl, nAzi)\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.create_cg_container","page":"API","title":"CanopyLayers.create_cg_container","text":"create_cg_container(FT, rt_dim::RTDimensions)\n\nCreate a CGContainer type struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.SFContainer","page":"API","title":"CanopyLayers.SFContainer","text":"mutable struct SFContainer{FT}\n\nContainer to speed SIF_fluxes! by pre-allocating arrays\n\nFields\n\nM⁻_sun\nM⁺_sun\nwfEs\nsfEs\nsbEs\nM⁺⁻\nM⁺⁺\nM⁻⁺\nM⁻⁻\nsun_dwl_iWlE\ntmp_dwl_iWlE\nϕ_cosΘ_lidf\nvfEplu_shade\nvbEmin_shade\nvfEplu_sun\nvbEmin_sun\nsigfEmin_shade\nsigbEmin_shade\nsigfEmin_sun\nsigbEmin_sun\nsigfEplu_shade\nsigbEplu_shade\nsigfEplu_sun\nsigbEplu_sun\nzeroB\ntmp_1d_nWlF\ntmp_1d_nLayer\ndnorm\nτ_dd\ntransmission of diffusive light?\nρ_dd\nextinction of diffuse light?\nXdd\nRdd\nY\nU\nS⁻\nS⁺\npiLs\npiLd\nFsmin\nFsplu\nFdmin\nFdplu\nFemo\nM⁺\nM⁻\nϕ_cosΘ\nF⁻\nF⁺\nnet_diffuse\ntmp_2d_nWlF_nLayer\ntmp_2d_nWlF_nLayer_2\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.create_sf_container","page":"API","title":"CanopyLayers.create_sf_container","text":"create_sf_container(FT, rt_dim::RTDimensions)\n\nCreate a SFContainer type struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.SWContainer","page":"API","title":"CanopyLayers.SWContainer","text":"mutable struct SWContainer{FT}\n\nContainer to speed short_wave! by pre-allocating arrays\n\nFields\n\ndnorm\ndnorm?\npiLo\npi * Lo\npiLoc\npi * Lo from canopy\npiLos\npi * Lo from soil\npiLoc2\npi * Lo from canopy 2D matrix\nρ_dd\nextinction of diffuse light?\nρ_sd\nextinction of direct light?\nτ_dd\ntransmission of diffusive light?\nτ_sd\ntransmission of direct light?\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.create_sw_container","page":"API","title":"CanopyLayers.create_sw_container","text":"create_sw_container(FT, rt_dim::RTDimensions)\n\nCreate a CGContainer type struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.RTContainer","page":"API","title":"CanopyLayers.RTContainer","text":"mutable struct RTContainer{FT}\n\nCollection of containers to speed up RT module\n\nFields\n\ncf_con\nCFContainer type container\ncg_con\nCGContainer type container\nsf_con\nSFContainer type container\nsw_con\nSWContainer type container\n\n\n\n\n\n","category":"type"},{"location":"API/#CanopyLayers.create_rt_container","page":"API","title":"CanopyLayers.create_rt_container","text":"create_rt_container(FT, rt_dim::RTDimensions)\n\nCreate an RTContainer, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#Initialization-of-Structures","page":"API","title":"Initialization of Structures","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"create_canopy_opticals\ncreate_canopy_rads\ncreate_canopy_rt\ncreate_incoming_radiation\ncreate_leaf_bios\ncreate_leaf_opticals\ncreate_rt_dims\ncreate_soil_opticals\ncreate_wave_length\ninitialize_rt_module","category":"page"},{"location":"API/#CanopyLayers.create_canopy_opticals","page":"API","title":"CanopyLayers.create_canopy_opticals","text":"create_canopy_opticals( FT, rt_dim::RTDimensions)\n\nCreate a CanopyOpticals struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.create_canopy_rads","page":"API","title":"CanopyLayers.create_canopy_rads","text":"create_canopy_rads(FT, rt_dim::RTDimensions)\n\nCreate a CanopyRads struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.create_canopy_rt","page":"API","title":"CanopyLayers.create_canopy_rt","text":"create_canopy_rt(FT; nLayer::Int = 20, LAI::Number = FT(3))\n\nCreate Canopy4RT, given\n\nFT Floating number type\nnLayer Number of canopy layers\nLAI Leaf area index\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.create_incoming_radiation","page":"API","title":"CanopyLayers.create_incoming_radiation","text":"create_incoming_radiation(\n            wls::WaveLengths{FT},\n            wlfn::String = FILE_SUN\n) where {FT<:AbstractFloat}\n\nCreate an AbstractIncomingRadiation struct, given\n\nwls WaveLengths type struct\nwlfn File that saves incoming wave information\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.create_leaf_bios","page":"API","title":"CanopyLayers.create_leaf_bios","text":"create_leaf_bios(FT, rt_dim::RTDimensions)\n\nCreate a LeafBios type struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.create_leaf_opticals","page":"API","title":"CanopyLayers.create_leaf_opticals","text":"create_leaf_opticals(\n            sWL::Array{FT,1},\n            file::String = FILE_OPTI\n) where {FT<:AbstractFloat}\n\nCreate an AbstractLeafOptiPara struct, given\n\nsWL Standard wave length\nopfn File that saves optical parameters\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.create_rt_dims","page":"API","title":"CanopyLayers.create_rt_dims","text":"create_rt_dims(\n            can::Canopy4RT{FT},\n            wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nCreate RTDimensions, given\n\ncan Canopy4RT type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.create_soil_opticals","page":"API","title":"CanopyLayers.create_soil_opticals","text":"create_soil_opticals(wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nCreate SoilOpticals struct, given\n\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.create_wave_length","page":"API","title":"CanopyLayers.create_wave_length","text":"create_wave_length(\n            FT,\n            sWLs = [collect(400.0:10.0: 650.1);\n                    collect(655.0: 5.0: 770.1);\n                    collect(780.0:25.0:2400.1)])\n\nCreate WaveLengths type struct, given\n\nFT Floating number type\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.initialize_rt_module","page":"API","title":"CanopyLayers.initialize_rt_module","text":"initialize_rt_module(FT; nLayer::Int = 20, LAI::Number = FT(3))\n\nInitialize the RT module and return the sturctures, given\n\nFT Floating number type\nnLayer Number of canopy layers\nLAI Leaf area index\n\nThis function initializes and returns\n\nangles SolarAngles\ncan Canopy4RT\ncan_opt CanopyOpticals\ncan_rad CanopyRads\nin_rad IncomingRadiation\nleaves Array{LeafBios,1}\nrt_con RTContainer\nrt_dim RTDimensions\nsoil SoilOpticals\nwls WaveLengths\n\n\n\n\n\n","category":"function"},{"location":"API/#Big-Leaf-Model","page":"API","title":"Big Leaf Model","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"big_leaf_partition","category":"page"},{"location":"API/#CanopyLayers.big_leaf_partition","page":"API","title":"CanopyLayers.big_leaf_partition","text":"big_leaf_partition(\n            lai::FT,\n            zenith::FT,\n            r_all::FT,\n            r_dir::FT = FT(0.8)\n) where {FT<:AbstractFloat}\n\nPartition the big-leaf canopy into sunlit and shaded layers, given\n\nlai Leaf area index\nzenith Zenith angle in degree\nr_all Total radiation in [W m⁻²]\nr_dir Direct radiation partition in r_all\n\nThe function returns\n\nratio ratio of sunlit leaves out of all leaves\nq_slm Mean sunlit layer PAR\nq_shm Mean shaded layer PAR\ne_sl Mean sunlit layer absorbed total energy\ne_sh Mean shaded layer absorbed total energy\n\n\n\n\n\n","category":"function"},{"location":"API/#SCOPE-Model","page":"API","title":"SCOPE Model","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"canopy_fluxes!\ncanopy_geometry!\ncanopy_matrices!\nclumping_factor!\ndiffusive_S\ndiffusive_S!\nfluspect!\nshort_wave!\nSIF_fluxes!\nthermal_fluxes!","category":"page"},{"location":"API/#CanopyLayers.canopy_fluxes!","page":"API","title":"CanopyLayers.canopy_fluxes!","text":"canopy_fluxes!(\n            can::Canopy4RT{FT},\n            can_opt::CanopyOpticals{FT},\n            can_rad::CanopyRads{FT},\n            in_rad::IncomingRadiation{FT},\n            soil::SoilOpticals{FT},\n            leaves::Array{LeafBios{FT},1},\n            wls::WaveLengths{FT},\n            rt_con::RTContainer{FT}\n) where {FT<:AbstractFloat}\n\nComputes a variety of integrated fluxes from the spectrally resolved     computations in the short-wave Canopy RT (e.g. absorbed soil radiation,     absorbed direct and diffuse PAR by layer (and angles for direct), net     direct and diffuse energy balance per layer), given\n\ncan Canopy4RT type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\nin_rad IncomingRadiation type struct\nsoil SoilOpticals type struct\nleaves Array of LeafBios type struct\nwls WaveLengths type struct\nrt_con RTContainer type container\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.canopy_geometry!","page":"API","title":"CanopyLayers.canopy_geometry!","text":"canopy_geometry!(\n            can::Canopy4RT{FT},\n            angles::SolarAngles{FT},\n            can_opt::CanopyOpticals{FT},\n            rt_con::RTContainer{FT}\n) where {FT<:AbstractFloat}\n\nComputes canopy optical properties (extinction coefficients for direct and     diffuse light) based on the SAIL model. Most important input parameters are     leaf inclination and azimuth distribution functions and sun-sensor     geometry . Canopy clumping Ω is implemented as in Pinty et al (2015), given\n\ncan Canopy4RT type struct\nangles SolarAngles type struct\ncan_opt CanopyOpticals type struct\nrt_con RTContainer type container\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.canopy_matrices!","page":"API","title":"CanopyLayers.canopy_matrices!","text":"canopy_matrices!(\n            leaves::Array{LeafBios{FT},1},\n            can_opt::CanopyOpticals{FT}\n) where {FT<:AbstractFloat}\n\nCompute scattering coefficient matrices for direct and diffuse light given     geometry dependent overall extinction coefficients and pigment dependent     leaf reflectance and transmission (computed via fluspect). This function     has to be called before short_wave! can be used.\n\nleaves Array of LeafBios type struct\ncan_opt CanopyOpticals type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.clumping_factor!","page":"API","title":"CanopyLayers.clumping_factor!","text":"clumping_factor!(\n            can::Canopy4RT{FT},\n            angles::SolarAngles{FT}\n) where {FT<:AbstractFloat}\n\nCalculate the clumping factor, given\n\ncan Canopy4RT type struct\nangles SolarAngles type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.diffusive_S","page":"API","title":"CanopyLayers.diffusive_S","text":"diffusive_S(τ_dd::Array{FT},\n            ρ_dd::Array{FT},\n            S⁻::Array{FT},\n            S⁺::Array{FT},\n            boundary_top::Array{FT},\n            boundary_bottom::Array{FT},\n            rsoil::Array{FT}\n) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport (used for thermal and SIF) given:\n\nτ_dd A 2D Array with layer reflectances\nρ_dd A 2D Array with layer transmissions\nS⁻ A 2D Array with layer source terms in the downwelling direction\nS⁺ A 2D Array with layer source terms in the upwelling direction\nboundary_top A 1D array with downwelling radiation at the top (top of canopy)\nboundary_bottom A 1D array with upwnwelling radiation at the bottom (soil)\nrsoil A 1D array with soil reflectance\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.diffusive_S!","page":"API","title":"CanopyLayers.diffusive_S!","text":"diffusive_S!(\n            sf_con::SFContainer{FT},\n            soil::SoilOpticals{FT},\n            rt_dim::RTDimensions\n) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport (used for thermal and SIF),     given\n\nsf_con SFContainer type container\nsoil SoilOpticals type struct\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.fluspect!","page":"API","title":"CanopyLayers.fluspect!","text":"fluspect!(leaf::LeafBios{FT},\n          wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nComputes leaf optical properties (reflectance and transittance) based on     pigment concentrations. Also computes Fluorescence excitation matrices.     Mostly based on PROSPECT-D for leaf reflectance/transmission and FluSpec     for fluorescence.\n\nleaf LeafBios type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.short_wave!","page":"API","title":"CanopyLayers.short_wave!","text":"short_wave!(can::Canopy4RT{FT},\n            can_opt::CanopyOpticals{FT},\n            can_rad::CanopyRads{FT},\n            in_rad::IncomingRadiation{FT},\n            soil::SoilOpticals{FT},\n            rt_con::RTContainer{FT}\n) where {FT<:AbstractFloat}\n\nSimulate the short wave radiation through the canopy, given\n\ncan Canopy4RT type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\nin_rad IncomingRadiation type struct\nsoil SoilOpticals type struct\nrt_con RTContainer type container\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.SIF_fluxes!","page":"API","title":"CanopyLayers.SIF_fluxes!","text":"SIF_fluxes!(leaves::Array{LeafBios{FT},1},\n            can_opt::CanopyOpticals{FT},\n            can_rad::CanopyRads{FT},\n            can::Canopy4RT{FT},\n            soil::SoilOpticals{FT},\n            wls::WaveLengths{FT},\n            rt_con::RTContainer{FT},\n            rt_dim::RTDimensions\n) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport for SIF radiation (calls     [diffusive_S!] internally). Layer reflectance and transmission is     computed from SW optical properties, layer sources from absorbed light and     SIF efficiencies. Boundary conditions are zero SIF incoming from atmosphere     or soil.\n\nleaves Array of LeafBios type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\ncan Canopy4RT type struct\nsoil SoilOpticals type struct\nwls WaveLengths type struct\nrt_con RTContainer type container\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.thermal_fluxes!","page":"API","title":"CanopyLayers.thermal_fluxes!","text":"thermal_fluxes!(\n            leaves::Array{LeafBios{FT},1},\n            can_opt::CanopyOpticals{FT},\n            can_rad::CanopyRads{FT},\n            can::Canopy4RT{FT},\n            soil::SoilOpticals{FT},\n            incLW::Array{FT},\n            wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport for thermal radiation (calls     [diffusive_S] internally). Layer reflectance and transmission is computed     from LW optical properties, layer sources from temperature and Planck law,     boundary conditions from the atmosphere and soil emissivity and     temperature. Currently only uses Stefan Boltzmann law to compute spectrally     integrated LW but can be easily adjusted to be spectrally resolved.\n\nleaves Array of LeafBios type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\ncan Canopy4RT type struct\nsoil SoilOpticals type struct\nincLW A 1D array with incoming long-wave radiation\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#Utils","page":"API","title":"Utils","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"calctav\ndcum\ndladgen\ne2phot\ne2phot!\nexpint\nfast∫\nfast∫!\npsofunction\nvolscatt!","category":"page"},{"location":"API/#CanopyLayers.calctav","page":"API","title":"CanopyLayers.calctav","text":"calctav(α::FT, nr::FT) where {FT<:AbstractFloat}\n\nComputes transmission of isotropic radiation across an interface between two     dielectrics (Stern F., 1964; Allen W.A., 1973)). From calctav.m in     PROSPECT-D\n\nα angle of incidence\nnr Index of refraction\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.dcum","page":"API","title":"CanopyLayers.dcum","text":"dcum(a::FT, b::FT, t::FT) where {FT<:AbstractFloat}\n\nTODO Add function description\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.dladgen","page":"API","title":"CanopyLayers.dladgen","text":"dladgen(a::FT, b::FT, litab_bnd::Array{FT,2}) where {FT<:AbstractFloat}\n\nTODO Calculate the freqency of WHAT?\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.e2phot","page":"API","title":"CanopyLayers.e2phot","text":"e2phot(λ::Array{FT}, E::Array{FT}) where {FT<:AbstractFloat}\n\nCalculates the number of moles of photons, given\n\nλ An array of wave length in [nm], converted to [m] by _FAC\nE Joules of energy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.e2phot!","page":"API","title":"CanopyLayers.e2phot!","text":"e2phot!(\n            λ::Array{FT,1},\n            E::Array{FT,1},\n            container::Array{FT,1}\n) where {FT<:AbstractFloat}\n\nCalculates the number of moles of photons, given\n\nλ An array of wave length in [nm], converted to [m] by _FAC\nE Joules of energy\ncontainer Container to avoid memory allocations\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.expint","page":"API","title":"CanopyLayers.expint","text":"expint(x::FT) where {FT<:AbstractFloat}\n\nTODO add function description\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.fast∫","page":"API","title":"CanopyLayers.fast∫","text":"fast∫(f::Vector{FT}, dx::Vector{FT}) where {FT<:AbstractFloat}\n\nA fast way of integrating functions, given\n\nf f(x) for each x\ndx Delta x for each x\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.fast∫!","page":"API","title":"CanopyLayers.fast∫!","text":"fast∫!(dx::Vector{FT}, f::Vector{FT}) where {FT<:AbstractFloat}\n\nA fast way of integrating functions, given\n\nf f(x) for each x\ndx Delta x for each x\n\nNote that f is a local container, and its values change in this operation.\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.psofunction","page":"API","title":"CanopyLayers.psofunction","text":"psofunction(K::FT,\n            k::FT,\n            Ω::FT,\n            LAI::FT,\n            q::FT,\n            dso::FT,\n            xl::FT\n) where {FT<:AbstractFloat}\n\nTODO explain the variables\n\nReturn the probability of observing a sunlit leaf at depth xl (pso, see eq     31 in vdT 2009), given\n\nxl Leaf depth in the canopy\n\n\n\n\n\n","category":"function"},{"location":"API/#CanopyLayers.volscatt!","page":"API","title":"CanopyLayers.volscatt!","text":"volscatt!(container::Array{FT,1},\n          tts::FT,\n          tto::FT,\n          psi::FT,\n          ttl::FT\n) where {FT<:AbstractFloat}\n\nCalculate interception parameters (chi_s and chi_s) and leaf reflectance     multiplier (frho) and transmittance multiplier (ftau), given\n\ncontainer Array container for results\ntts Solar zenith angle\ntto Viewing zenith angle\npsi Azimuth angle\nttl Leaf inclination angle\n\n\n\n\n\n","category":"function"}]
}
